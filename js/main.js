// Generated by CoffeeScript 1.6.3
(function() {
  App.Zh_CN = {};

  App.translate = App.Zh_CN;

  $.template = function(name) {
    return _.template($("#" + name).html());
  };

  App.Buffer = {
    commands: [],
    add: function(fn) {
      var commands, next;
      commands = this.commands;
      commands.push(fn);
      if (this.commands.length === 1) {
        fn(next);
      }
      return next = function() {
        commands.shift();
        if (commands.length) {
          return commands[0](next);
        }
      };
    }
  };

  $.fn.extend({
    textNodes: function() {
      var whitespace;
      whitespace = /^\s*$/;
      return this.contents().filter(function() {
        return this.nodeType === Node.TEXT_NODE && !whitespace.test(this.nodeValue);
      });
    },
    i18n: function() {
      $('*', this).textNodes().each(function() {
        return this.data = App.translate[this.data] || this.data;
      });
      $('input', this).attr('placeholder', function(index, value) {
        return App.translate[value] || value;
      });
      return this;
    }
  });

  App.Alert = (function() {
    function Alert() {}

    Alert.displayValidationErrors = function(messages) {
      var key, message;
      for (key in messages) {
        message = messages[key];
        this.addValidationError(key, message);
      }
      return this.show("Warning!", "Fix validation errors and try again", "alert-warning");
    };

    Alert.addValidationError = function(field, message) {
      var controlGroup;
      controlGroup = $("input[name=" + field + "]").parents('.control-group');
      controlGroup.addClass("error");
      $(".help-inline", controlGroup).html(message);
      return $(".help-block", controlGroup).html(message);
    };

    Alert.removeValidationError = function(field) {
      var controlGroup;
      controlGroup = $("input[name=" + field + "]").parents('.control-group');
      controlGroup.removeClass("error");
      $(".help-inline", controlGroup).html("");
      return $(".help-block", controlGroup).html("");
    };

    Alert.show = function(warning, appendTo) {
      var alert;
      if (appendTo == null) {
        appendTo = $('body');
      }
      alert = $('<div>', {
        "class": 'alert'
      }).append($('<button>', {
        "class": 'close',
        'data-dismiss': 'alert',
        type: 'button',
        html: '&times;'
      }), warning);
      console.log(alert, warning);
      return alert.appendTo(appendTo);
    };

    Alert.hide = function() {
      $(".help-inline").html('');
      $(".help-block").html('');
      $('.error').removeClass('error');
      return $(".alert").hide();
    };

    return Alert;

  })();

  App.Router = Parse.Router.extend({
    routes: {
      "": 'home',
      login: 'login',
      logout: 'logout',
      signup: 'signup',
      analytics: 'analytics',
      instruments: 'instruments',
      'instruments/add': 'newInstrument',
      'instrument/:cid': 'instrument',
      calendar: 'calendar',
      'account': 'account',
      'account/:tab': 'account'
    },
    initialize: function() {
      var _this = this;
      this.navbar = new App.NavBar;
      this.sidebar = new App.SideBar;
      this.navbar.render();
      this.sidebar.render();
      return Parse.history.on('route', function() {
        return _this.sidebar.update();
      });
    },
    requireLogin: function(next) {
      var route;
      if (!Parse.User.current()) {
        route = Parse.history.fragment;
        if (route !== 'login' && route !== 'signup') {
          return app.navigate('login', true);
        }
      } else {
        this._switchToLogin(false);
        this.navbar.render();
        this.content = next();
        this._switchMain(this.content.el);
        this.content.render();
        if (Parse.history.fragment === 'analytics') {
          return $('#main-stats').show();
        } else {
          return $('#main-stats').slideUp();
        }
      }
    },
    _switchMain: function(el) {
      return $('#pad-wrapper').empty().append(el);
    },
    _switchToLogin: function(toLogin) {
      $('html')[toLogin ? 'addClass' : 'removeClass']('login-bg');
      $('#sidebar-nav, .navbar, #pad-wrapper')[toLogin ? 'hide' : 'show']();
      $('.header')[toLogin ? 'show' : 'hide']();
      $('.login-wrapper').remove();
      return this.sidebar.update();
    },
    login: function() {
      this._switchToLogin(true);
      return new App.LoginView;
    },
    logout: function() {
      Parse.User.logOut();
      this.navbar.render();
      return app.navigate('', true);
    },
    signup: function() {
      this._switchToLogin(true);
      return new App.SignupView;
    },
    home: function() {
      return this.requireLogin(function() {
        Parse.User.current().fetch();
        return new App.InstrumentsTableView;
      });
    },
    account: function(tab) {
      return this.requireLogin(function() {
        return new App.AccountView(tab);
      });
    },
    calendar: function() {
      return this.requireLogin(function() {
        return new App.CalendarView;
      });
    },
    analytics: function() {
      return this.requireLogin(function() {
        $('#main-stats').html(new App.StatsView().el);
        return new App.ChartsView;
      });
    },
    instruments: function() {
      return this.requireLogin(function() {
        return new App.InstrumentsTableView;
      });
    },
    newInstrument: function() {
      return this.requireLogin(function() {
        return new App.InstrumentView;
      });
    },
    instrument: function(id) {
      return this.requireLogin(function() {
        return new App.InstrumentView(id);
      });
    }
  });

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
