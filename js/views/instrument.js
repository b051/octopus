// Generated by CoffeeScript 1.6.3
(function() {
  var InstrumentCollection, all_fields, collection, loadLocal, reloadData, saveLocal, viewConnect,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  InstrumentCollection = Parse.Collection.extend({
    model: Instrument,
    query: new Parse.Query(Instrument)
  });

  collection = App.collection = new InstrumentCollection();

  loadLocal = function() {
    var data, instr, instruments, model, models, _i, _len;
    data = Parse.localStorage.getItem(Parse._getParsePath('instruments'));
    if (data) {
      models = JSON.parse(data);
      instruments = [];
      for (_i = 0, _len = models.length; _i < _len; _i++) {
        model = models[_i];
        instr = new Parse.Object._create('Instrument');
        instr.id = model._id;
        delete model._id;
        instr.set(model);
        instr._refreshCache();
        instr._opSetQueue = [{}];
        instruments.push(instr);
      }
      collection.add(instruments);
      return instruments.length;
    }
    return 0;
  };

  saveLocal = function() {
    var instr, model, models, _i, _len, _ref;
    models = [];
    _ref = collection.models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      instr = _ref[_i];
      model = instr.toJSON();
      model._id = instr.id;
      models.push(model);
    }
    return Parse.localStorage.setItem(Parse._getParsePath('instruments'), JSON.stringify(models));
  };

  all_fields = {
    iid: "Identity number",
    name: "Name",
    producer: "Producer",
    type: "Type",
    sn: "Serial number",
    group: "Group",
    range: "Range",
    scale: "Scale",
    state: "State",
    rank: "Rank",
    base_of_rank: "Base of rank",
    main_instrument: "Main instrument",
    parts_of_instrument: "Parts of instrument",
    acquisition_price: "Acquisition price",
    acquisition_date: "Date of acquisition",
    available_licenses: "Available licenses",
    deliverer: "Deliverer",
    deliverer_code: "Deliverer code",
    ordering_number: "Ordering number",
    precision: "Precision",
    store_price: "Store price",
    user_name: "Username",
    user_department: "Department",
    user_address: "Address",
    user_phone: "Phone",
    user_email: "Email",
    user_fax: "Fax"
  };

  reloadData = function(callback, force) {
    var error,
      _this = this;
    if (force == null) {
      force = false;
    }
    if (!force) {
      try {
        if (loadLocal()) {
          collection.fetch({
            success: function() {
              console.log("fetched");
              return saveLocal();
            }
          });
          return typeof callback === "function" ? callback() : void 0;
        }
      } catch (_error) {
        error = _error;
        console.log(error);
      }
    }
    console.log('reloading instruments...');
    return collection.fetch({
      success: function() {
        saveLocal();
        return typeof callback === "function" ? callback() : void 0;
      },
      error: function(error) {
        if (typeof callback === "function") {
          callback();
        }
        return console.log('error');
      }
    });
  };

  viewConnect = function() {
    var _this = this;
    if (collection.isEmpty()) {
      this.$el.html('<h4>Loading...</h4>');
      console.log('reloadData');
      reloadData(function() {
        return _this._render();
      });
    } else {
      console.log('_render');
      this._render();
    }
    return collection.on('reset', this._render.bind(this));
  };

  App.InstrumentsTableView = Parse.View.extend({
    className: 'table-wrapper',
    template: $.template('table-instruments'),
    itemTemplate: _.template('<li class="item" name="<%=name%>">\
              <i class="icon-reorder"></i>\
              <%= title %>\
              <input type="checkbox" <% if (checked) { %>checked<% } %> class="check">\
            </li>'),
    popUpTemplate: '<div class="pop-dialog" style="position:absolute;">\
      <div class="pointer">\
        <div class="arrow"></div>\
        <div class="arrow_border"></div>\
      </div>\
      <div class="body">\
        <div class="settings">\
          <a href="#" class="close-icon"><i class="icon-remove-sign"></i></a>\
          <ul class="items">\
          </ul>\
        </div>\
      </div>\
    </div>',
    initialize: function() {
      var mousedown;
      this.place = this.place.bind(this);
      mousedown = function(e) {
        var closest;
        closest = $(e.target).closest('.pop-dialog');
        if (closest.length === 0) {
          return this.closePopup(e);
        }
      };
      return this.mousedown = mousedown.bind(this);
    },
    events: {
      'keyup .search': 'search',
      'click tbody > tr': 'selectInstrument',
      'click .table-edit': 'editInstrument',
      'click .custom-columns': 'openPopup'
    },
    _render: function() {
      var totalCount, _i, _ref, _results;
      console.log(arguments);
      if ((_ref = this.table) != null) {
        _ref.dataTable().fnDestroy();
      }
      this.$el.html(this.template({
        all_fields: all_fields,
        collection: collection
      }));
      this.table = this.$('table.table').dataTable({
        bAutoWidth: false,
        aoColumnDefs: [
          {
            aTargets: [0],
            bVisible: false
          }, {
            aTargets: [1],
            mRender: function(data, type, row) {
              return "<a href='#instrument/" + row[0] + "'>" + data + "</a>";
            }
          }, {
            aTargets: [15],
            mRender: function(data) {
              var d, date, m, y;
              date = new Date(data);
              y = date.getFullYear();
              m = date.getMonth() + 1;
              d = date.getDate();
              return "" + m + "/" + d + "/" + y;
            }
          }, {
            aTargets: [10],
            mRender: function(data) {
              var num, rating, star, value, _i;
              rating = $('<span>', {
                "class": 'rating'
              });
              value = Number(data);
              for (num = _i = 0; _i < 5; num = ++_i) {
                star = $('<span>', {
                  "class": 'star'
                });
                if (num === value) {
                  star.addClass('on');
                }
                rating.append(star);
              }
              return rating[0].outerHTML;
            }
          }, {
            aTargets: [6, 9],
            mRender: function(data) {
              var labels;
              labels = _.map(data.split(','), function(value) {
                return '<span class="label label-success">' + value + '</span> ';
              });
              return labels.join('');
            }
          }
        ]
      });
      totalCount = Object.keys(all_fields).length + 1;
      this.orders = (function() {
        _results = [];
        for (var _i = 0; 0 <= totalCount ? _i < totalCount : _i > totalCount; 0 <= totalCount ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      this.all_fields = Object.keys(all_fields);
      return this.setFields(["iid", "name", "producer", "type", "group", "state", "rank", "acquisition_date", "user_name", "user_email"]);
    },
    setFields: function(fields) {
      var i, _i, _j, _len, _ref, _ref1, _results;
      this.fields = [];
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        i = fields[_i];
        this.fields.push(i);
      }
      fields = Object.keys(all_fields);
      _results = [];
      for (i = _j = 0, _ref = fields.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
        _results.push(this.table.fnSetColumnVis(i + 1, (_ref1 = fields[i], __indexOf.call(this.fields, _ref1) >= 0)));
      }
      return _results;
    },
    setOrders: function(orders) {
      var col, i, inst, _i, _j, _len, _len1, _ref;
      col = null;
      _ref = ColReorder.aoInstances;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        inst = _ref[_i];
        if (inst.s.dt.oInstance === this.table) {
          col = inst;
          break;
        }
      }
      this.orders = [];
      for (_j = 0, _len1 = orders.length; _j < _len1; _j++) {
        i = orders[_j];
        this.orders.push(i);
      }
      console.log('setOrders', orders);
      return col != null ? col._fnOrderColumns(orders) : void 0;
    },
    render: function() {
      viewConnect.apply(this);
      return this;
    },
    changeTable: function(event, options) {
      var changed, field, fields, index, new_fields, orders, _i, _len, _ref;
      if (event.type === 'sortstop') {
        console.log(arguments);
        changed = options.item.attr('name');
        console.log(changed);
        orders = [0];
        new_fields = $('.item', this.items).map(function() {
          return $(this).attr('name');
        });
        new_fields = new_fields.toArray();
        window.new_fields = new_fields;
        console.log(new_fields);
        _ref = this.all_fields;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          field = _ref[_i];
          index = new_fields.indexOf(field);
          orders.push(index + 1);
        }
        this.all_fields = new_fields;
        return this.setOrders(orders);
      } else if (event.type === 'change') {
        fields = [];
        $('.item', this.items).each(function() {
          field = $(this).attr('name');
          if ($('input', this).is(':checked')) {
            return fields.push(field);
          }
        });
        return this.setFields(fields);
      }
    },
    openPopup: function(event) {
      var checked, items, key, title, _i, _len, _ref;
      event.stopPropagation();
      event.preventDefault();
      if (!this.picker) {
        this.picker = $(this.popUpTemplate);
        this.picker.appendTo('body');
        $('.close-icon', this.picker).on('click', this.closePopup.bind(this));
        $('.items', this.picker).sortable({
          cursor: 'move',
          stop: this.changeTable.bind(this)
        });
      }
      this.picker.addClass('is-visible');
      this.items = items = this.picker.find('.items').empty();
      _ref = this.all_fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        title = all_fields[key];
        checked = __indexOf.call(this.fields, key) >= 0;
        items.append(this.itemTemplate({
          name: key,
          title: title,
          checked: checked
        }));
      }
      items.disableSelection();
      $('input[type=checkbox]', items).on('change', this.changeTable.bind(this));
      this.$('.btn-group').removeClass('open');
      $(document).on('mousedown', this.mousedown);
      $(window).on('resize', this.place);
      return this.place.apply(this);
    },
    closePopup: function(event) {
      $(document).off('mousedown', this.mousedown);
      this.picker.removeClass('is-visible');
      return $(window).off('resize', this.place);
    },
    place: function() {
      var element, height, offset;
      element = this.$('.custom-columns');
      offset = element.offset();
      height = element.outerHeight(true);
      this.picker.css({
        top: offset.top + height + 10,
        left: offset.left,
        width: 354
      });
      return this.picker.focus();
    },
    search: function(event) {
      var term;
      term = event.target.value;
      return this.table.fnFilter(term, null);
    },
    selectInstrument: function(event) {
      var iid, instrumentView, match, tr, wrapper;
      tr = event.currentTarget;
      match = $(tr).find('.iid a').attr('href').match(/#instrument\/(.*)/);
      iid = match[1];
      wrapper = this.$el.siblings('.instrumentview');
      if (!wrapper.length) {
        wrapper = $('<div>', {
          "class": 'instrumentview section'
        });
        this.$el.parent().append(wrapper);
      }
      console.log(this.$el, wrapper);
      instrumentView = new App.InstrumentView(iid, true);
      wrapper.html(instrumentView.el);
      return instrumentView.render();
    },
    editInstrument: function(event) {
      var link;
      link = $(event.target).parents('tr').find('a').attr('href');
      return app.navigate(link, true);
    },
    deleteInstrument: function(event) {}
  });

  App.InstrumentView = Parse.View.extend({
    className: 'row-fluid form-wrapper',
    template: $.template('form-instrument'),
    initialize: function(instrumentId, usetabs) {
      this.instrumentId = instrumentId;
      this.usetabs = usetabs;
    },
    _box: function(name) {
      var box, title;
      title = all_fields[name];
      box = $('<div>', {
        "class": 'field-box'
      });
      return box.append("<label>" + title + ":</label>");
    },
    textField: function(name, options) {
      var attrs, box, input, tooltip;
      if (options == null) {
        options = {};
      }
      box = this._box(name);
      tooltip = options.tooltip;
      if (tooltip) {
        delete options.tooltip;
        $.extend(options, {
          'data-toggle': 'tooltip',
          'data-trigger': 'focus',
          'data-placement': 'right',
          'title': tooltip
        });
      }
      attrs = {
        "class": 'span6 input-large inline-input',
        type: 'text',
        name: name,
        value: this.model.get(name)
      };
      $.extend(attrs, options);
      input = $('<input>', attrs);
      if (tooltip) {
        input.tooltip();
      }
      return box.append(input);
    },
    chosenField: function(name, options, chosen) {
      var arr, box, option, select, value, _i, _len, _ref;
      if (options == null) {
        options = [];
      }
      if (chosen == null) {
        chosen = {};
      }
      box = this._box(name);
      select = $('<select>', {
        "class": 'chzn-select span6',
        name: name
      });
      select.prop('multiple', chosen.multiple);
      select.append('<option></option>');
      value = this.model.get(name);
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        arr = options[_i];
        option = $('<option>');
        if ($.isArray(arr)) {
          option.val(arr[0]);
          option.html(arr[1]);
          select.append("<option value='" + option[0] + "'>" + option[1] + "</option>");
        } else {
          option.val(arr);
          option.html(arr);
        }
        if ($.isArray(value)) {
          option.attr('selected', (_ref = option.val(), __indexOf.call(value, _ref) >= 0));
        } else {
          option.attr('selected', option.val() === value);
        }
        select.append(option);
      }
      box.append(select);
      return box;
    },
    dateField: function(name) {
      var box, date, picker;
      box = this._box(name);
      picker = $('<input>', {
        "class": 'input-large inline-input span6 datepicker',
        type: 'text',
        name: name
      });
      date = this.model.get(name) || new Date();
      picker.datepicker().on('changeDate', function(event) {
        return $(this).datepicker('hide');
      });
      picker.data('datepicker').setDate(date);
      return box.append(picker);
    },
    rateField: function(name, number) {
      var box, num, rating, star, value, _i;
      box = this._box(name);
      rating = $('<span>', {
        "class": 'rating'
      });
      value = this.model.get(name);
      for (num = _i = 0; 0 <= number ? _i < number : _i > number; num = 0 <= number ? ++_i : --_i) {
        star = $('<span>', {
          "class": 'star'
        });
        if (num === value) {
          star.addClass('on');
        }
        rating.append(star);
      }
      return box.append(rating);
    },
    currencyField: function(name, symbols) {
      var box, button, currency, fraction, input, match, symbol, symbolList, symbolPicker, _i, _len, _ref;
      box = this._box(name);
      currency = $('<div>', {
        "class": 'input-prepend input-append span6 currency'
      });
      match = (_ref = this.model.get(name)) != null ? _ref.match(/(.)(\d+)(\.\d+)/) : void 0;
      symbolPicker = $('<div>', {
        "class": 'btn-group'
      });
      button = $('<button class="btn dropdown-toggle" data-toggle="dropdown"></button>');
      symbolList = $('<ul>', {
        "class": 'dropdown-menu'
      });
      for (_i = 0, _len = symbols.length; _i < _len; _i++) {
        symbol = symbols[_i];
        symbolList.append($('<li>').append($('<a>', {
          href: '#',
          html: symbol
        })));
      }
      symbolPicker.append(button, symbolList);
      input = $('<input>', {
        "class": 'input-large span8 text-right',
        type: 'text',
        name: name
      });
      fraction = $('<span>', {
        "class": 'add-on'
      });
      currency.append(symbolPicker, input, fraction);
      if (match) {
        button.html(match[1]);
        input.val(match[2]);
        fraction.html(match[3]);
      }
      return box.append(currency);
    },
    events: {
      'click .currency a': 'changeCurrency',
      'click .star': 'clickStar',
      'click .delete': 'deleteInstrument',
      'click .save': 'save'
    },
    _render: function() {
      var basic_data, user;
      if (this.instrumentId) {
        this.model = collection.get(this.instrumentId);
        if (!this.model) {
          return app.navigate('', true);
        }
      } else {
        this.model = new Instrument();
      }
      this.$el.html(this.template({
        model: this.model,
        usetab: this.usetabs
      }));
      basic_data = this.$('.basic-data');
      basic_data.append(this.textField('iid', {
        tooltip: 'Instrument identify number'
      }));
      basic_data.append(this.textField('name', {
        tooltip: 'Instrument name'
      }));
      basic_data.append(this.textField('producer'));
      basic_data.append(this.textField('sn'));
      basic_data.append(this.textField('range'));
      basic_data.append(this.textField('scale'));
      basic_data.append(this.textField('precision'));
      basic_data.append(this.chosenField('group', ['auditing instrument', 'not auditing intr.', 'etalon', 'dummy']));
      basic_data.append(this.chosenField('state', ['closed', 'lost', 'wasted', 'repairing', 'may use', 'destroyed', 'calibrated over', 'is calibrating', 'discharged', 'reserve'], {
        'multiple': true
      }));
      basic_data.append(this.rateField('rank', 5));
      basic_data.append(this.textField('base_of_rank'));
      basic_data.append(this.textField('main_instrument'));
      basic_data.append(this.textField('parts_of_instrument'));
      user = this.$('.instrument-user');
      user.append(this.textField('deliverer'));
      user.append(this.textField('deliverer_code'));
      user.append(this.textField('ordering_number'));
      user.append(this.textField('available_licenses'));
      user.append(this.currencyField('acquisition_price', ['$', '¥']));
      user.append(this.currencyField('store_price', ['$', '¥']));
      user.append(this.dateField('acquisition_date'));
      user.append(this.textField('user_name'));
      user.append(this.textField('user_department'));
      user.append(this.textField('user_address'));
      user.append(this.textField('user_phone'));
      user.append(this.textField('user_fax'));
      user.append(this.textField('user_email', {
        'type': 'email'
      }));
      return this.$('.chzn-select').chosen();
    },
    render: function() {
      if (this.instrumentId) {
        viewConnect.apply(this);
      } else {
        this._render();
      }
      return this;
    },
    clickStar: function(event) {
      var star;
      star = $(event.target);
      star.siblings().removeClass('on');
      return star.addClass('on');
    },
    changeCurrency: function(event) {
      var a, currency;
      event.preventDefault();
      a = $(event.target);
      currency = a.text();
      return a.parents('.currency').find('button').html(currency);
    },
    deleteInstrument: function(event) {},
    save: function(event) {
      var groupACL,
        _this = this;
      event.preventDefault();
      $(event.target).attr('disabled', true).html('Saving...');
      this.model.set('rank', this.$('.rating .star').index(this.$('.rating .on')));
      this.$('.field-box > input, .field-box > select').each(function(i, input) {
        var field, key;
        key = input.name;
        if (key) {
          field = $(input);
          if (field.hasClass('datepicker')) {
            return _this.model.set(key, field.data('datepicker').getDate());
          } else {
            return _this.model.set(key, field.val());
          }
        }
      });
      this.$('.currency').each(function(i, div) {
        var c, currency, fraction, input, val;
        c = $(div);
        currency = $('button', c).text();
        fraction = $('.add-on', c).text();
        input = $('input', c);
        val = currency + input.val() + fraction;
        return _this.model.set(input.attr('name'), val);
      });
      groupACL = new Parse.ACL();
      groupACL.setRoleWriteAccess('octopus', true);
      groupACL.setRoleReadAccess('octopus', true);
      this.model.setACL(groupACL);
      return this.model.save({
        success: function() {
          console.log('saved!');
          $(event.target).html('Saved!').removeClass('primary').addClass('success');
          return setTimeout(function() {
            return $(event.target).html('Save').attr('disabled', false).removeClass('success').addClass('primary', 200);
          }, 2000);
        },
        error: function(error) {
          $(event.target).html('Save').attr('disabled', false);
          return console.error(error);
        }
      });
    }
  });

}).call(this);

/*
//@ sourceMappingURL=instrument.map
*/
