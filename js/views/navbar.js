// Generated by CoffeeScript 1.6.3
(function() {
  var NavMessagesView, NavNotificationDropDown, NavNotificationView, NavSearchForm, dropdown, minsAgo, stopEvent, timeElapse;

  dropdown = $.template('widget-dropdown');

  minsAgo = function(mins) {
    return new Date(new Date().getTime() - mins * 60 * 1000);
  };

  timeElapse = function(time) {
    var elaspe, hours, mins, now;
    now = new Date();
    if (!_.isDate(time)) {
      time = new Date(time['iso']);
    }
    elaspe = now.getTime() - time.getTime();
    if (elaspe < 86400000) {
      mins = Math.floor(elaspe / 60000);
      hours = Math.floor(mins / 60);
      mins -= hours * 60;
      if (hours) {
        return "" + hours + " hours";
      } else {
        return "" + mins + " mins";
      }
    } else {
      return time.toLocaleDateString();
    }
  };

  stopEvent = function(event) {
    event.stopPropagation();
    return event.preventDefault();
  };

  App.NavBar = Parse.View.extend({
    el: $('.nav'),
    initialize: function() {
      return this.render();
    },
    render: function() {
      var profileView;
      if (Parse.User.current()) {
        profileView = dropdown({
          text: Parse.User.current().get('username'),
          items: [['account', 'Personal info'], ['account/settings', 'Account settings'], ['export', 'Export your data'], '', ['logout', 'Logout']]
        });
        this.searchForm = new NavSearchForm;
        this.notifications = new NavNotificationView;
        this.messagesDropdown = new NavMessagesView;
        return this.$el.empty().append(this.searchForm.el, this.notifications.el, this.messagesDropdown.el, profileView);
      } else {
        return this.$el.empty();
      }
    }
  });

  NavNotificationDropDown = Parse.View.extend({
    tagName: 'li',
    className: 'notification-dropdown hidden-phone',
    events: {
      'click .pop-dialog': stopEvent,
      'click .pop-dialog .close-icon': 'closeMenu',
      'click .trigger': 'openMenu'
    },
    initialize: function() {
      $('body').click(this.closeMenu.bind(this));
      this.render();
      this.dialog = this.$('.pop-dialog');
      return this.trigger = this.$('.trigger');
    },
    closeMenu: function(event) {
      if (event.target.className === 'close-icon') {
        stopEvent(event);
      }
      this.dialog.removeClass('is-visible');
      return this.trigger.removeClass('active');
    },
    openMenu: function(event) {
      stopEvent(event);
      $(".notification-dropdown .pop-dialog").removeClass("is-visible");
      $(".notification-dropdown .trigger").removeClass("active");
      this.dialog.toggleClass('is-visible');
      if (this.dialog.hasClass('is-visible')) {
        return this.trigger.addClass('avtive');
      } else {
        return this.trigger.removeClass('active');
      }
    }
  });

  NavMessagesView = NavNotificationDropDown.extend({
    template: $.template('navbar-notification'),
    messageTemplate: $.template('widget-message'),
    render: function() {
      var collection;
      this.$el.html(this.template({
        icon: 'icon-envelope-alt',
        type: 'messages'
      }));
      collection = new MessageCollection();
      collection.add([
        {
          title: 'Alejandra Galván',
          detail: 'There are many variations of available, but the majority have suffered alterations.',
          thumbnail: 'img/contact-img.png',
          time: minsAgo(48)
        }, {
          title: 'Alejandra Galván',
          detail: 'There are many variations of available, have suffered alterations.',
          thumbnail: 'img/contact-img2.png',
          time: minsAgo(26)
        }, {
          title: 'Alejandra Galván',
          detail: 'There are many variations of available, but the majority have suffered alterations.',
          thumbnail: 'img/contact-img.png',
          time: minsAgo(13)
        }
      ]);
      collection.each(this.addMessage.bind(this));
      this.$('.count').html(collection.length ? collection.length : '');
      return this;
    },
    addMessage: function(message) {
      var html;
      html = this.messageTemplate(_.extend(message.toJSON(), {
        timeElapse: timeElapse
      }));
      return this.$('.messages').prepend(html);
    }
  });

  NavNotificationView = NavNotificationDropDown.extend({
    template: $.template('navbar-notification'),
    notificationTemplate: $.template('widget-notification'),
    render: function() {
      var objects;
      this.$el.html(this.template({
        icon: 'icon-warning-sign',
        type: 'notifications'
      }));
      this.$('.notifications').prepend('<h3>You have <span class="count"></span> new notifications</h3>');
      objects = [
        {
          type: 'signin',
          content: 'New user registration',
          time: minsAgo(13)
        }, {
          type: 'signin',
          content: 'New user registration',
          time: minsAgo(18)
        }, {
          type: 'envelope-alt',
          content: 'New message from Alejandra',
          time: minsAgo(28)
        }, {
          type: 'download-alt',
          content: 'New order placed',
          time: minsAgo(1440)
        }
      ];
      _.each(objects, this.addNotification.bind(this));
      this.$('.count').html(objects.length ? objects.length : '');
      return this;
    },
    addNotification: function(notification) {
      var html;
      html = this.notificationTemplate(_.extend(notification, {
        timeElapse: timeElapse
      }));
      return this.$('.notifications .footer').before(html);
    }
  });

  NavSearchForm = Parse.View.extend({
    tagName: 'li',
    className: 'hidden-phone',
    initialize: function() {
      return this.render();
    },
    template: $.template('navbar-search'),
    render: function() {
      this.$el.html(this.template({}));
      return this;
    }
  });

}).call(this);

/*
//@ sourceMappingURL=navbar.map
*/
