// Generated by CoffeeScript 1.6.3
(function() {
  var apn, apnConnection, apnSendPlayPush, asocket, awssrouters, socket, ws, wssrouters;

  ws = require('ws');

  apn = require('apn');

  apnConnection = new apn.Connection({
    gateway: "gateway.sandbox.push.apple.com"
  });

  awssrouters = [];

  wssrouters = [];

  exports.socket = socket = function(re, f) {
    return wssrouters.push([re, f]);
  };

  exports.asocket = asocket = function(re, f) {
    return awssrouters.push([re, f]);
  };

  apnSendPlayPush = function(event, device) {
    var gameId, note;
    note = new apn.Notification();
    note.expiry = Math.floor(Date.now() / 1000) + 3600;
    note.badge = 1;
    gameId = event.game.gameId;
    note.alert = "" + gameId + " new play";
    note.payload = event;
    return apnConnection.pushNotification(note, device);
  };

  ws.prototype.sendJSON = function(id) {
    return this.send(JSON.stringify(id, null, 4));
  };

  exports.start = function(server) {
    var wss;
    wss = new ws.Server({
      server: server
    });
    return wss.on('connection', function(ws) {
      console.log("socket opened");
      ws.on('error', function(error) {
        return console.log("error " + error);
      });
      ws.on('message', function(message) {
        var match, router, _i, _j, _len, _len1;
        for (_i = 0, _len = awssrouters.length; _i < _len; _i++) {
          router = awssrouters[_i];
          match = message.match(router[0]);
          if (match) {
            return router[1](ws, match);
          }
        }
        if (!ws.player) {
          return ws.sendJSON({
            error: "please sign in with GameCenter first"
          });
        }
        for (_j = 0, _len1 = wssrouters.length; _j < _len1; _j++) {
          router = wssrouters[_j];
          match = message.match(router[0]);
          if (match) {
            return router[1](ws, match);
          }
        }
        return ws.sendJSON({
          error: "Bad Request: " + message
        });
      });
      return ws.on('close', function() {
        return console.log("socket closed");
      });
    });
  };

}).call(this);
