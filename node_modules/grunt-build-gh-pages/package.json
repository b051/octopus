{
  "name": "grunt-build-gh-pages",
  "description": "Grunt plugin to take a build from dist on your current branch and put it into another branch, e.g. gh-pages, without merging. Ideal for when builds should be stored in orphan branches.",
  "version": "0.0.4",
  "homepage": "https://github.com/pajtai/grunt-build-gh-pages",
  "author": {
    "name": "Peter Ajtai",
    "email": "peter.ajtai@thinksolid.com",
    "url": "http://netlumination.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pajtai/grunt-build-gh-pages.git"
  },
  "bugs": {
    "url": "https://github.com/pajtai/grunt-build-gh-pages/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/pajtai/grunt-build-gh-pages/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.19"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.1",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1",
    "grunt-contrib-copy": "~0.4.1",
    "matchdep": "~0.1.2",
    "underscore": "~1.4.4",
    "grunt-shell": "~0.2.2"
  },
  "peerDependencies": {
    "grunt": "~0.4.1",
    "grunt-shell": "~0.2.2"
  },
  "keywords": [
    "gruntplugin",
    "gh-pages",
    "git",
    "branches",
    "builds"
  ],
  "readme": "# grunt-build-gh-pages\n\n> Grunt plugin to take a build from dist on your current branch and put it into another branch, e.g. gh-pages, without merging. Ideal for when builds should be stored in orphan branches.\n\n## Note\n\nTested on a Mac. Seems to currently have issues on Windows.\n\n## Working Example\n\nIf you'd like to play around with a working example, fork [exploratory-javascript-tests](https://github.com/pajtai/exploratory-javascript-tests), and run `npm install && grunt build`, then look at the `gh-pages` branch.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-build-gh-pages --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-build-gh-pages');\n```\n\n## Assumptions\n\n* You are using version of Node (0.8.19+) and NPM (1.1.6+) that support peer dependencies.\n* This task is run after you have run the build task (or as the end part of your build task)\n  * The full build must be in the distribution directory at the beginning of this task.\n* A separate branch that has just the builds exists\n* You want to auto push to that separate branch when you run this task!\n\n## The \"build_gh_pages\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `build_gh_pages` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  build_gh_pages: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n* `dist`: The directory the build is placed in. This directory should be gitignored in your current branch and the build branch.\n  * Default: \"dist\" \n* `build_branch`: The name of the branch the build should be commited to. This branch should exist. Ideally it should be an orphan branch.\n  * Default: \"gh-pages\"   \n* `pull`: Whether you want to the a `git pull --rebase` on the build branch before modifying it. Use this if mutliple people can build to the repo.\n  * Default: true\n* `exclude`: An array of other directories besides `node_modules` you wish to exclude. These directories should be in the `.gitignore` of both branches.\n\n### Usage Examples\n\n#### Default Options\nIn this example, the default options are used to do something with whatever. So if the `testing` file has the content `Testing` and the `123` file had the content `1 2 3`, the generated result would be `Testing, 1 2 3.`\n\n```js\ngrunt.initConfig({\n  build_gh_pages: {\n    gh_pages: {\n      // Leave empty if you just want to run the defaults\n    },\n    production: {\n      options: {\n        build_branch: \"prod\",\n        dist: \"prodOptimized\",\n        pull: false\n      }\n    }\n  },\n})\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n* 2013 05 04 - `0.0.3` - Added ability to exclude custom directories in addition to `node_modules`\n* 2013 04 29 - `0.0.2` - Adding grunt-shell as peer dependency - upped node needed to 0.8.19 to reflect\n* 2013 04 17 - `0.0.1` - Initial release\n",
  "readmeFilename": "README.md",
  "_id": "grunt-build-gh-pages@0.0.4",
  "_from": "grunt-build-gh-pages@0.0.4"
}
